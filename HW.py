import pandas as pd







def GetMaS(S):

    for I in range(len(S)):
        MaxS = S[I][0]
        for i in range(len(S[I])): # 找出該組合最大值
            if len(S[I][i]):
                if S[I][i]['整體滿意度'] > MaxS['整體滿意度']:
                    MaxS = S[I][i]
            else:
                del S[I][i] # 清掉多餘dict
        S[I] = MaxS  # 只留最大值組合


    return S[I]

# 選過不能再選
# 整體滿意度=(-熱量(正規後)*0.1)+喜愛程度
# '熱量(正規後)': [1.0, 0.8914728682170543, 0.6449612403100775, 0.5844961240310077, 0.4186046511627907, 0.3875968992248062, 0.23255813953488372, 0.21705426356589147, 0.12403100775193798, 0.10852713178294573, 0.0, 0.0]
# 預算上限800/7*3 = 342.857
# 不考慮熱量上限
# 最少必須保留60*剩餘天數元
# 60為每日最低飯錢

Dish = {'餐點': ['叻沙牛肉麵', '石鍋拌飯', '花生雞腿堡', '原汁牛肉麵', '炸豬排飯', '咖哩飯', '雞胸肉餐', '雙層牛肉吉士堡', '涼麵', '魷魚羹', '功夫麵', '烤雞排'], 
'熱量': [945, 875, 716, 677, 570, 550, 450, 440, 380, 370, 300, 300],
'價格': [160, 140, 129, 115, 110, 120, 135, 105, 60, 70, 65, 60], 
'喜愛程度': [100, 88, 76, 74, 71, 69, 68, 65, 62, 59, 53, 50], 
'整體滿意度': [90, 79, 70, 68, 67, 65, 66, 63, 61, 58, 53, 50], 
'熱量(正規後).1': [1.0, 0.8914728682170543, 0.6449612403100775, 0.5844961240310077, 0.4186046511627907, 0.3875968992248062, 0.23255813953488372, 0.21705426356589147, 0.12403100775193798, 0.10852713178294573, 0.0, 0.0]}

T = 7 # 總期數
Sn = 800 # 剩下的餐費
S = {} #裝各期各x下的value
MinP = min(Dish['價格']) #每日最低預算
Dish = pd.DataFrame(Dish) # 丟進DF方便篩選

for t in range(T, 0, -1): # 建立字典中的字典，每個小字典裝當期值
    S[t] = {}
    for i in range(0 , len(Dish)): 
        S[t][i] = {}
        for I in range(0 , len(Dish)):
            S[t][i][I] = {}

# {3期數: {0上次選的餐點: {0現在選的餐點: 
for t in range(T, 0, -1):
    if t == T:
        for i in range(0, len(Dish)): 
            S[t][i][0]['餐點'] = Dish['餐點'][i]
            S[t][i][0]['整體滿意度'] = Dish['整體滿意度'][i]
            S[t][i][0]['價格'] = Dish['價格'][i]
    else:
        for I in range(len(S[t + 1])): # 上一期的餐點組合數
            for i in range(len(S[t + 1][I])):  
                Dish2 = Dish[(~Dish['餐點'].isin(S[t+1][I]['餐點'].split(","))) & (Dish['價格'] <= Sn-((t-1)* MinP)-S[t + 1][I]['價格'])].reset_index()# 濾掉重複、超出預算餐點
                for a in range(0, len(Dish2)): # 這一期的餐點組合數
                    S[t][I][a]['餐點'] =  S[t + 1][I]['餐點'] + "," + Dish2['餐點'][a]
                    S[t][I][a]['整體滿意度'] = Dish2['整體滿意度'][a] + S[t + 1][I]['整體滿意度']
                    S[t][I][a]['價格']  = Dish2['價格'][a] + S[t + 1][I]['價格']

    S[t][I] = GetMaS(S[t])

Opt = {}
for t in range(T, 0, -1):
    MaxS = S[t][0]
    for i in range(len(S[t])):
        if len(S[t][i]):
            if S[t][i]['整體滿意度'] > MaxS['整體滿意度']:
                MaxS = S[t][i]
    Opt[t] = MaxS

print(Opt)            
                
